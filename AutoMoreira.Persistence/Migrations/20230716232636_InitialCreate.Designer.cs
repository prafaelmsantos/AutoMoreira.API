// <auto-generated />
using System;
using AutoMoreira.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoMoreira.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230716232636_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AutoMoreira.Core.Domains.Contacto", b =>
                {
                    b.Property<int>("ContactoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("contacto_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactoId"), 1L, 1);

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2")
                        .HasColumnName("data_hora");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("Mensagem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("mensagem");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("telefone");

                    b.HasKey("ContactoId");

                    b.ToTable("contacto", (string)null);
                });

            modelBuilder.Entity("AutoMoreira.Core.Domains.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("AutoMoreira.Core.Domains.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descricao");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Funcao")
                        .HasColumnType("int")
                        .HasColumnName("funcao");

                    b.Property<string>("ImagemUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("imagem_url");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PrimeiroNome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("primeiro_nome");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UltimoNome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ultimo_nome");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("AutoMoreira.Core.Domains.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("AutoMoreira.Core.Domains.Marca", b =>
                {
                    b.Property<int>("MarcaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("marca_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarcaId"), 1L, 1);

                    b.Property<string>("MarcaNome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nome");

                    b.HasKey("MarcaId");

                    b.ToTable("marca", (string)null);

                    b.HasData(
                        new
                        {
                            MarcaId = 1,
                            MarcaNome = "Audi"
                        },
                        new
                        {
                            MarcaId = 2,
                            MarcaNome = "Mercedes"
                        },
                        new
                        {
                            MarcaId = 3,
                            MarcaNome = "BMW"
                        },
                        new
                        {
                            MarcaId = 4,
                            MarcaNome = "Peugeot"
                        },
                        new
                        {
                            MarcaId = 5,
                            MarcaNome = "Volkswagen"
                        },
                        new
                        {
                            MarcaId = 6,
                            MarcaNome = "Citroën"
                        },
                        new
                        {
                            MarcaId = 7,
                            MarcaNome = "Renault"
                        },
                        new
                        {
                            MarcaId = 8,
                            MarcaNome = "Volvo"
                        },
                        new
                        {
                            MarcaId = 9,
                            MarcaNome = "Fiat"
                        });
                });

            modelBuilder.Entity("AutoMoreira.Core.Domains.Modelo", b =>
                {
                    b.Property<int>("ModeloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("modelo_id");

                    b.Property<int>("MarcaId")
                        .HasColumnType("int");

                    b.Property<string>("ModeloNome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nome");

                    b.HasKey("ModeloId");

                    b.ToTable("modelo", (string)null);

                    b.HasData(
                        new
                        {
                            ModeloId = 1,
                            MarcaId = 1,
                            ModeloNome = "A3"
                        },
                        new
                        {
                            ModeloId = 2,
                            MarcaId = 2,
                            ModeloNome = "Classe A"
                        },
                        new
                        {
                            ModeloId = 3,
                            MarcaId = 3,
                            ModeloNome = "Serie 1"
                        },
                        new
                        {
                            ModeloId = 4,
                            MarcaId = 4,
                            ModeloNome = "208"
                        },
                        new
                        {
                            ModeloId = 5,
                            MarcaId = 5,
                            ModeloNome = "Golf"
                        },
                        new
                        {
                            ModeloId = 6,
                            MarcaId = 6,
                            ModeloNome = "C4"
                        },
                        new
                        {
                            ModeloId = 7,
                            MarcaId = 7,
                            ModeloNome = "Megane"
                        },
                        new
                        {
                            ModeloId = 8,
                            MarcaId = 8,
                            ModeloNome = "V40"
                        },
                        new
                        {
                            ModeloId = 9,
                            MarcaId = 9,
                            ModeloNome = "Punto"
                        });
                });

            modelBuilder.Entity("AutoMoreira.Core.Domains.Veiculo", b =>
                {
                    b.Property<int>("VeiculoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("veiculo_id");

                    b.Property<int>("Ano")
                        .HasColumnType("int")
                        .HasColumnName("ano");

                    b.Property<int>("Cilindrada")
                        .HasColumnType("int")
                        .HasColumnName("cilindrada");

                    b.Property<int>("Combustivel")
                        .HasColumnType("int")
                        .HasColumnName("combustivel");

                    b.Property<string>("Cor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cor");

                    b.Property<string>("ImagemURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("imagem_url");

                    b.Property<int>("MarcaId")
                        .HasColumnType("int")
                        .HasColumnName("marca_id");

                    b.Property<int>("ModeloId")
                        .HasColumnType("int")
                        .HasColumnName("modelo_id");

                    b.Property<bool>("Novidade")
                        .HasColumnType("bit")
                        .HasColumnName("novidade");

                    b.Property<int>("NumeroPortas")
                        .HasColumnType("int")
                        .HasColumnName("numero_portas");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("observacoes");

                    b.Property<int>("Potencia")
                        .HasColumnType("int")
                        .HasColumnName("potencia");

                    b.Property<double>("Preco")
                        .HasColumnType("float")
                        .HasColumnName("preco");

                    b.Property<string>("Transmissao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transmissao");

                    b.Property<string>("Versao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("versao");

                    b.HasKey("VeiculoId");

                    b.ToTable("veiculo", (string)null);

                    b.HasData(
                        new
                        {
                            VeiculoId = 1,
                            Ano = 2020,
                            Cilindrada = 1999,
                            Combustivel = 1,
                            Cor = "Azul",
                            ImagemURL = "exemplo.jpg",
                            MarcaId = 1,
                            ModeloId = 1,
                            Novidade = false,
                            NumeroPortas = 5,
                            Observacoes = "Garantia de 2 anos",
                            Potencia = 140,
                            Preco = 20000.0,
                            Transmissao = "Automatica",
                            Versao = "Sport"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AutoMoreira.Core.Domains.Identity.UserRole", b =>
                {
                    b.HasOne("AutoMoreira.Core.Domains.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoMoreira.Core.Domains.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoMoreira.Core.Domains.Modelo", b =>
                {
                    b.HasOne("AutoMoreira.Core.Domains.Marca", "Marca")
                        .WithMany("Modelos")
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("AutoMoreira.Core.Domains.Veiculo", b =>
                {
                    b.HasOne("AutoMoreira.Core.Domains.Marca", "Marca")
                        .WithMany("Veiculos")
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoMoreira.Core.Domains.Modelo", "Modelo")
                        .WithMany("Veiculos")
                        .HasForeignKey("VeiculoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Marca");

                    b.Navigation("Modelo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("AutoMoreira.Core.Domains.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AutoMoreira.Core.Domains.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AutoMoreira.Core.Domains.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AutoMoreira.Core.Domains.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoMoreira.Core.Domains.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AutoMoreira.Core.Domains.Identity.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AutoMoreira.Core.Domains.Marca", b =>
                {
                    b.Navigation("Modelos");

                    b.Navigation("Veiculos");
                });

            modelBuilder.Entity("AutoMoreira.Core.Domains.Modelo", b =>
                {
                    b.Navigation("Veiculos");
                });
#pragma warning restore 612, 618
        }
    }
}
